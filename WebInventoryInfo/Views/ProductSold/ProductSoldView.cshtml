﻿@model WebInventoryInfo.CustomClass.ProductSoldCustom
@{
    ViewBag.Title = "Product Sold";
}

<h2>Product Sold</h2>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
            margin-top: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }
    </style>
</head>

@using (Html.BeginForm("ProductSoldView", "ProductSold", FormMethod.Post, new { id = "ProductSoldId" }))
{
    <div class="form-group row">
        <label class="col-md-2">Date: </label>
        <div class="col-md-4">
            @Html.EditorFor(model => model.OrderDate,
                     new
                     {
                         htmlAttributes = new
                         {
                             @class = "form-control",
                             @type = "date",
                             @name = "OrderDate"
                         }
                     })
            @Html.ValidationMessageFor(model => model.OrderDate)

        </div>
        <label class="col-md-2">Number: </label>
        <div class="col-md-4">
            @Html.EditorFor(model => model.OrderNumber,
                            new { htmlAttributes = new { @class = "form-control", @name = "OrderNumber" } })
            @Html.ValidationMessageFor(model => model.OrderNumber)
        </div>
    </div>

    <div class="form-group row">
        <label class="col-md-2">Product: </label>
        <div class="col-md-4">
            @Html.DropDownListFor(model => model.ProductSoldDetail[0].ProductId,
                                  ViewBag.ProductList as SelectList,
                                  "Select a product",
                                  new { id = "productId", @class = "form-control", onchange = "getProductAvailableQuanitity(this)" })
        </div>

        <label class="col-md-1">Disponibility: </label>
        <div class="col-md-2">
            <input type="number" class="form-control" id="disponibilityId" readonly/>
        </div>

        <label class="col-md-1">Quantity: </label>
        <div class="col-md-2">
            @Html.EditorFor(model => model.ProductSoldDetail[0].QuantitySold,
                            new { htmlAttributes = new { @class = "form-control", id = "Quantity" } })
        </div>
    </div>
    <div class="row">
        <button class="btn btn-primary" onclick="addData()" type="button">Add product detail</button>
        <button class="btn btn-success" type="submit">Save</button>
    </div>

    <div class="row">
        <!-- Display data in a table -->
        <table id="productDetail">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
}

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    var productDisponibility = 0;
    $(document).ready(function () {
        // Intercept the form submission
        $('#ProductSoldId').submit(function (e) {
            // Prevent the default form submission
            e.preventDefault();
            // Serialize the form data
            var formData = $(this).serialize();
            // Make the AJAX request
            $.ajax({
                type: 'POST',
                url: $(this).attr('action'),
                data: formData,
                success: function (data) {
                    // Handle the success response
                    if (data.status)
                        alert(`${data.message}`);
                    else
                        alert(`${data.message}`);
                    console.log('Success:', data);
                },
                error: function (error) {
                    // Handle the error response
                    alert(`Error: ${error}`);
                    console.log('Error:', error);
                }
            });
        });
    });

    function valAddProductDetail(Quantity) {
        if (productDisponibility == 0) {
            alert(`This product doesn't have disponibility.`);
            return true;
        } else if (Quantity > productDisponibility) {
            alert(`This product doesn't have enough quantity to continue with this process.`);
            return true;
        }
        else
            return false;
    }

    function addData() {
       
        // Get form values
        var productId = document.getElementById("productId");
        var productText = productId.options[productId.selectedIndex].text;
        var Quantity = document.getElementById("Quantity").value;

        //Some validations before letting to add product detail 
        if (valAddProductDetail(Quantity))
            return;

        // Create a new row in the table
        var table = document.getElementById("productDetail");
        var row = table.insertRow(table.rows.length);
        var rowCount = table.rows.length;

        // Insert data into the row
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);

        cell1.innerHTML = productText;
        cell2.innerHTML = Quantity;

        // Append hidden input to the row to name of the class
        var hiddenProductId = document.createElement("input");
        hiddenProductId.type = "hidden";
        hiddenProductId.name = `ProductSoldDetail[${rowCount - 2}].ProductId`;
        hiddenProductId.value = productId.value;
        cell1.appendChild(hiddenProductId);

        // Append hidden input to the row to name of the class
        var hiddenQuantitySold = document.createElement("input");
        hiddenQuantitySold.type = "hidden";
        hiddenQuantitySold.name = `ProductSoldDetail[${rowCount - 2}].QuantitySold`;
        hiddenQuantitySold.value = Quantity;
        cell2.appendChild(hiddenQuantitySold);
    }

    function getProductAvailableQuanitity(productId) {
        if (productId.value > 0) {
            $.ajax({
                url: `/ProductSold/GetProductAvailableQuanitity?ProductId=${productId.value}`,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    // Handle the success response
                    if (data.status) {
                        $('#disponibilityId').val(data.dispobility);
                        productDisponibility = data.dispobility
                    }
                    else {
                        alert(`${data.message}`);
                        console.log('Success:', data);
                        productDisponibility = 0;
                    }
                },
                error: function (error) {
                    // Handle the error response
                    alert(`Error: ${error}`);
                    console.log('Error:', error);
                    productDisponibility = 0;
                }
            });
        } else
            $('#disponibilityId').val(0);

    }
</script>